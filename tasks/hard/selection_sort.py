"""
СОРТИРОВКА ВЫБОРКОЙ

Этот алгоритм сегментирует список на две части:
отсортированную и неотсортированную.
Наименьший элемент удаляется из второго списка и добавляется в первый.
На практике не нужно создавать новый список для отсортированных элементов.
В качестве него используется крайняя левая часть списка.
Находится наименьший элемент и меняется с первым местами.

Теперь, когда нам известно, что первый элемент списка отсортирован,
находим наименьший элемент из оставшихся и меняем местами со вторым.
Повторяем это до тех пор, пока не останется последний элемент в списке.

По мере увеличения значения i нужно проверять меньше элементов.

ВРЕМЯ СОРТИРОВКИ: в среднем O(n²)
"""


def selection_sort(array: list) -> list:

    len_array = len(array)  # число элементов в списке

    for elem in range(len_array - 1):
        minimum_value = array[elem]     # запоминаем минимальное значение
        index_minimum_value = elem      # запоминаем индекс минимального значения
        for i in range(elem + 1, len_array):    # поиск минимального среди оставшихся элементов
            if minimum_value > array[i]:
                minimum_value = array[i]
                index_minimum_value = i

        if index_minimum_value != elem:     # обмен значениями, если был найден минимальный не в i-й позиции
            t = array[elem]
            array[elem] = array[index_minimum_value]
            array[index_minimum_value] = t

    return array


if __name__ == '__main__':
    assert selection_sort([2, 1, 5, 4, 7]) == [1, 2, 4, 5, 7]
    assert selection_sort([2, -5, -3, 3, 1, 2]) == [-5, -3, 1, 2, 2, 3]
    print('Решено!')
